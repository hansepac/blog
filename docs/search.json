[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! I am Hans Capener, a Data Scientist and aspiring Biostatistician. I have created this blog to host the things I have learned in my experience in the world of Data Consulting and personal projects. Enjoy :)"
  },
  {
    "objectID": "posts/docker-cloud-run/index.html",
    "href": "posts/docker-cloud-run/index.html",
    "title": "Cloud Run Docker with OAuth",
    "section": "",
    "text": "A guide to publishing a streamlit application in Google Cloud using a Docker container. This guide will also include steps to setup an OAuth security layer using GCP’s Identity-Aware Proxy, so only individuals with a certain google email domain can access it. It should be noted that these steps will work to publish any docker container, but this guide will showcase streamlit in particular."
  },
  {
    "objectID": "posts/docker-cloud-run/index.html#overview",
    "href": "posts/docker-cloud-run/index.html#overview",
    "title": "Cloud Run Docker with OAuth",
    "section": "",
    "text": "A guide to publishing a streamlit application in Google Cloud using a Docker container. This guide will also include steps to setup an OAuth security layer using GCP’s Identity-Aware Proxy, so only individuals with a certain google email domain can access it. It should be noted that these steps will work to publish any docker container, but this guide will showcase streamlit in particular."
  },
  {
    "objectID": "posts/docker-cloud-run/index.html#prerequisites",
    "href": "posts/docker-cloud-run/index.html#prerequisites",
    "title": "Cloud Run Docker with OAuth",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nA Google account with access to the Google Cloud Console.\nA Google Cloud Project with access to a billing account.\nA functioning dockerized streamlit application (or other application) being run on port 8080. This is Cloud Run’s default port. You may use a different port if you to change settings in Google Cloud during the Cloud Run deployment process.\n(For OAuth with Identiy-Aware Proxy) Ownership of a domain. (example.com)\n\nThroughout this tutorial, Google Cloud will state its need for certain services to be enabled. Enable them as they come."
  },
  {
    "objectID": "posts/docker-cloud-run/index.html#hosting-docker-containers-with-cloud-run",
    "href": "posts/docker-cloud-run/index.html#hosting-docker-containers-with-cloud-run",
    "title": "Cloud Run Docker with OAuth",
    "section": "Hosting Docker Containers with Cloud Run",
    "text": "Hosting Docker Containers with Cloud Run\nThere are two main avenues for getting a docker container to Cloud Run:\n\nSetting up Continous Deployment through Github\nUploading Docker containers manually to the Artifact Registry\n\n\nHere is a quick breakdown of the pros and cons of each:\n\n\nContinuous Deployment via Github\nPros:\n\nWith each push to a designated branch, Google Cloud will automatically deploy that latest push.\nIf the latest push’s Docker container doesn’t successfully build, the last working container will continue to run.\nDoes not require working with Google Cloud’s CLI.\nTakes less than 5 minutes to implement.\n\nCons:\n\nRequires strict Github protocal. Accidently pushing changes to the branch that have a fatal error on the application’s end (not a docker build error) will result in a broken application for the end user\n\n\n\nManual upload to Artifact Registry\nPros:\n\nSeperates Github branch from the production-level product\n\nCons:\n\nEach update to the product requires manual redeployment. (Obviously)\nRequires setting up Google Cloud CLI on a computer, linking it to your GCP.\n\n\n\n\nContinuous Deployment via Github\n\n\nNavigate to Cloud Run in the Google Cloud Console\n\n\n\nand select “Connect Repo”.\n\n\n\nGive the service a name, and select a region.\nThe only imperative settings here are Authentication and Ingress Control. If you want you application available to all public, select Allow unauthenticated users and All for Ingress Control. Otherwise, to setup OAuth with Identity-Aware Proxy, we will select Require authentication and Internal the checkbox Allow traffic from external Application Load Balancers. You may consider changing other default settings to meet your needs.\n\nFor streamlit apps, we also want to enable Session Affinity. This will fix a host of problems that would otherwise arise.\n\nHit Deploy!\nIf you aren’t adding OAuth, then you are done! Google will give you a url to access your Cloud Run service. If you own a domain and want to use a custom link, click on your Cloud run service, and look into the Integrations tab. There is an integration for Custom Domains.\nTo add OAuth, move onto OAuth with Identiy-Aware Proxy.\n\n\nManual upload to Artifact Registry\n\nSetting up Google Cloud CLI\nBegin by installing Google Cloud CLI\nYou may need to restart your terminal for gcloud to be added to your PATH.\nThen, run gcloud init to configure google cloud CLI, and connect it to your google cloud account.\nSwitch your to your active Google Cloud Project: gcloud config set project PROJECT_ID\n\n\nUploading the Docker image to Artifact Registry\n\nCreate a Artifact Registry Repository\nOpen your Google Cloud Console, and navigate to the Artifact Registry. There, create a repository to store docker images. This can also be done via command line with the followoing code:\ngcloud artifacts repositories create ARTIFACT_REPO_NAME --repository-format=docker --location=REGION --description=\"DESCRIPTION\"\nArguments:\n\nARTIFACT_REPO_NAME and DESCRIPTION can be whatever you want them to be.\nREGION: Reference Google Cloud Documentation to decide which region would be best for your application. Generally, pick the region closest to you.\n\nWe will also want to give our account the necessary permissions to upload Docker images to the Artifact Registry. Navigate to the IAM section of “IAM & Admin”. Find your google account, and add the role “Artifact Registry Writer” to your account by clicking the small pencil on the far right of your account row.\n\n\nUploading the Docker Image\nNow open a terminal and navigate to the root folder of your Dockerfile.\nRun the following command to upload your Docker image:\ngcloud builds submit --region=REGION --tag REGION-docker.pkg.dev/PROJECT_ID/ARTIFACT_REPO_NAME/NAME_OF_IMAGE:TAG\nArguments:\n\nREGION: Region as selected earlier\nPROJECT_ID:\n\nLook in Project Settings or…\nProgrammatically: gcloud config get-value project\n\nARTIFACT_REPO_NAME:\n\nThe name of the repo you made earlier\n\nNAME_OF_IMAGE:\n\nName of your choice\n\nTAG\n\nNot neccessary\nTag of your choice, normally used for version history (i.e. 1.12.2) or to describe the particular update\n\n\n\n\nRunning Docker image with Cloud Run\nNow, navigate to Cloud Run and follow the same steps as shown in the continous deployment method, except this time we will select our image from the Artifact Registry with the “Deploy one revision from an existing container image” option.\nJust like in the other option, Google Cloud will create a link you can use to access your Cloud Run Service. (See Continuous Deployment section for notes on custom domains)"
  },
  {
    "objectID": "posts/docker-cloud-run/index.html#oauth-with-identity-aware-proxy",
    "href": "posts/docker-cloud-run/index.html#oauth-with-identity-aware-proxy",
    "title": "Cloud Run Docker with OAuth",
    "section": "OAuth with Identity-Aware Proxy",
    "text": "OAuth with Identity-Aware Proxy\nChristo Olivier gave a phenominal tutorial on the following process in his youtube video. Much of this guide follows his steps, with some additional solutions to issues I ran into following his tutorial.\n\nEnable IAP API\nFirst, lets enable the Identity-Aware Proxy API and configure the OAuth consent screen.\n \nWith our goal to only allow those with the same google org email domain to access our Cloud Run Service, we will select “Internal”:\n\nFill out the required feilds:\n\nApp Name\nUser supported email\nDeveloper email address\n\nYou may also consider uploading an app logo to improve the look of your OAuth consent screen.\nWe will not need any user scopes, as our application does not need any information about the particular user in our organization, so hit “Save and Continue”.\n\n\nCreate a Load Balancer\nFor a Cloud Run service to have an Identity-Aware Proxy OAuth layer, it must be fed through a Load Balancer.\nNavigate to “Load Balancing” under the “Network Services” Category\n\nCreate a new load balancer, and configure with the following choices: - Application Load Balancer (HTTP/HTTPS) - Public facing (external) - Best for global workloads - Global external Application Load Balancer\nFrontend:\n\nName doesn’t matter: streamlit-fe (fe for front end)\nProtocal: HTTPS\nIP address: Create IP Adress\n\nName doesn’t matter: streamlit-ip\n\nCertificate: Create a New Certificate\n\nCreate mode: Create Google-managed certificate\nGive it a domain you plan to host the streamlit app on.\n\nEX: reports.sales.name-of-domain.com\n\n\nEnable HTTP to HTTPS redirect\n\nBackend:\n\nCreate a Backend Service.\nName doesn’t matter: streamlit-be\nBackend Type: Serverless network endpoint group\nServerless network endpoint groups: Create Serverless Network Endpoint Group\n\nName doesn’t matter: streamlit-neg\nRegion: Choose the same region your Cloud Run service is hosted in\nSelect that service\n\n\nRouting Rules:\n- Keep on \"Simple host and path\" rule\nClick Create\nOnce the load balancer has been created, click on it, and view the frontend IP address.\n\nYou will need to swiftly enter this ip address into the domain with the corresponding domain or subdomain. For example, managing a domain via squarespace would look something like this:\n\nWe choose Type “A” because our Data entry is an IP address. The Host section is reports.sales, because I have chosen to host this app on reports.sales.name-of-your-domain.com, which matches the domain entered into the certificate of the load balancer.\nOnce this step is complete, view the certificate of the load balancer. It may take 5 minutes to an hour, but so long as the domain information was entered correctly on both the certificate’s end and the domain’s end, it should eventually pivot from “PROVISIONING” to “ACTIVE”.\n\n\n\nEnable IAP for Load Balancer\nReturn to the Identity-Aware Proxy section. You should see the backend of our load balancer we created on the IAP screen. Enable it for IAP, and ADD PRINCIPAL to organization-name.com to have the IAP-secured Web App User role.\nEnabling IAP should have created an IAP service bot that we need to give access to invoke our Cloud Run service. Return to IAM & Admin, and give service-PROJECT_NUMBER@gcp-sa-iap.iam.gserviceaccount.com the role “Cloud Run Invoker”.\nWhile this service bot should be automatically created, (for me) it often isn’t. However, this service bot can be created manually via Google Cloud CLI beta commands:\ngcloud beta services identity create --project=PROJECT_ID --service=iap.googleapis.com\nThe created service account may not appear in the list service accounts in IAM, but that is okay; replace PROJECT_NUMBER with your project number, paste the account into Principal section of “Grant Access”, and give it the role “Cloud Run Invoker”.\n\nThe Waiting Game\nGoogle says it can take up to 24 hours for this to fully work. In my trials of this process, it only took about 10-20 minutes until the website was able to link up nicely. If you get “Error: Page not found. The requested URL was not found on this server.” or “reports.sales.name-of-domain.com did not send any data”, then you did something wrong.\nThe error you hope to see has to do with google not being able to recongize the method of data flow (something along these lines). For me, this meant I just needed to be patient, and 10ish minutes later, streamlit loaded.\nIf you get “Error: Forbidden”, then something is wrong with your IAP setup. Ensure your domain has the “IAP-secured Web App” role, your iap service bot has the role “Cloud Run Invoker”, and your Ingress control allows traffic from Application Load Balancers"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Blog",
    "section": "",
    "text": "Cloud Run Docker with OAuth\n\n\n\n\n\n\nGoogle Cloud Project\n\n\nHosting\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nHans Capener\n\n\n\n\n\n\nNo matching items"
  }
]